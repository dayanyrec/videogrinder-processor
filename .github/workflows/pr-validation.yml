name: 🔍 Pull Request Validation

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  quick-validation:
    name: ⚡ Quick Validation
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: image=moby/buildkit:buildx-stable-1

    - name: 📁 Create required directories
      run: mkdir -p uploads outputs temp tmp

    - name: 🔧 Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: buildx-dev-${{ github.sha }}
        restore-keys: |
          buildx-dev-${{ github.base_ref }}
          buildx-dev-

    - name: 🏗️ Build development image (cached)
      run: |
        docker buildx build \
          --target development \
          --cache-from type=local,src=/tmp/.buildx-cache \
          --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
          --load \
          --tag videogrinder-dev:pr-${{ github.event.pull_request.number }} \
          .

    - name: 🔄 Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: 🎨 Run code formatting check
      run: |
        docker run --rm \
          -v $(pwd):/app \
          -w /app \
          videogrinder-dev:pr-${{ github.event.pull_request.number }} \
          make fmt

    - name: 🔍 Run linting
      run: |
        docker run --rm \
          -v $(pwd):/app \
          -w /app \
          videogrinder-dev:pr-${{ github.event.pull_request.number }} \
          make lint

    - name: 🧪 Run unit tests
      run: |
        docker run --rm \
          -v $(pwd):/app \
          -w /app \
          videogrinder-dev:pr-${{ github.event.pull_request.number }} \
          make test

  build-validation:
    name: 🏗️ Build Validation
    runs-on: ubuntu-latest
    needs: quick-validation

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 📁 Create required directories
      run: mkdir -p uploads outputs temp tmp

    - name: 🏗️ Build production image
      run: make setup prod

    - name: 🧪 Verify production build
      run: |
        echo "✅ Production image built successfully"
        docker images | grep videogrinder

  pr-summary:
    name: 📋 PR Summary
    runs-on: ubuntu-latest
    needs: [quick-validation, build-validation]
    if: always()

    steps:
    - name: 📊 Validation Summary
      run: |
        echo "## 🔍 Pull Request Validation Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ needs.quick-validation.result }}" = "success" ]; then
          echo "✅ **Quick Validation**: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "  - Code formatting: ✅" >> $GITHUB_STEP_SUMMARY
          echo "  - Linting (Go + JS): ✅" >> $GITHUB_STEP_SUMMARY
          echo "  - Unit tests: ✅" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Quick Validation**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.build-validation.result }}" = "success" ]; then
          echo "✅ **Build Validation**: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "  - Production build: ✅" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Build Validation**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🚀 **Ready for merge**: ${{ needs.quick-validation.result == 'success' && needs.build-validation.result == 'success' }}" >> $GITHUB_STEP_SUMMARY
