name: 🔍 VideoGrinder CI/CD Pipeline

on:
  push:
    branches: [main]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Code Formatting
        run: |
          echo "🎨 Checking code formatting..."
          make fmt-check

      - name: Check Code Quality (Lint)
        run: |
          echo "🔍 Running linters..."
          make lint

      - name: Run Unit Tests
        run: |
          echo "🧪 Running unit tests..."
          make test
          make test-js

  build-and-health:
    name: 🏗️ Build & Health Check
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_ENDPOINT_URL: http://localstack:4566

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Production Images
        run: |
          echo "🏗️ Building all 3 services (Web + API + Processor)..."
          make setup prod

      - name: Start LocalStack for Health Check
        run: |
          echo "🚀 Starting LocalStack for health check..."
          make localstack-start

      - name: Initialize LocalStack Resources
        run: |
          echo "🔧 Initializing LocalStack resources..."
          make localstack-init

      - name: Verify LocalStack Status
        run: |
          echo "🔍 Verifying LocalStack status..."
          make localstack-status

      - name: Health Check Services
        run: |
          echo "🧹 Cleaning up any existing containers..."
          make down prod

          echo "🚀 Starting services for health check..."
          make run prod

          echo "🔍 Running health checks..."
          if ! timeout 60s bash -c 'until make health; do sleep 2; done'; then
            echo "❌ Health check failed. Showing service logs..."
            make logs-tail prod
            make down prod
            exit 1
          fi

          echo "✅ Health check passed!"
          echo "🧹 Cleaning up containers..."
          make down prod

  e2e:
    name: 🧪 E2E Tests
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_ENDPOINT_URL: http://localstack:4566

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          cd web
          npm install
          cd ..

      - name: Start LocalStack
        run: |
          echo "🚀 Starting LocalStack for E2E tests..."
          make localstack-start

      - name: Initialize LocalStack Resources
        run: |
          echo "🔧 Initializing LocalStack resources (S3, DynamoDB, SQS)..."
          make localstack-init

      - name: Verify LocalStack Status
        run: |
          echo "🔍 Verifying LocalStack status..."
          make localstack-status

      - name: Start services with LocalStack
        run: |
          echo "🚀 Starting services with LocalStack integration..."
          make run prod

      - name: Run E2E Tests
        uses: cypress-io/github-action@v5
        with:
          install: false
          working-directory: web
          wait-on: http://localhost:8080/health
          publish-summary: true

      - name: Clean up containers
        run: |
          echo "✅ E2E tests completed!"
          echo "🧹 Cleaning up containers..."
          make down prod

  pipeline-summary:
    name: 📋 Pipeline Summary
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-health, e2e]
    if: always()

    steps:
      - name: Pipeline Summary
        run: |
          echo "## 🔍 VideoGrinder CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.code-quality.result }}" = "success" ]; then
            echo "**Code Quality**: ✅ PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Code Quality**: ❌ FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.build-and-health.result }}" = "success" ]; then
            echo "**Build & Health Check**: ✅ PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Build & Health Check**: ❌ FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.e2e.result }}" = "success" ]; then
            echo "**E2E Tests**: ✅ PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "**E2E Tests**: ❌ FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.code-quality.result }}" = "success" ] && [ "${{ needs.build-and-health.result }}" = "success" ] && [ "${{ needs.e2e.result }}" = "success" ]; then
            echo "**Pipeline Status**: ✅ PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Pipeline Status**: ❌ FAILED" >> $GITHUB_STEP_SUMMARY
          fi
