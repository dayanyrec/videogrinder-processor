services:
  # Tools Service - for development tools and CI/CD
  videogrinder-tools:
    build:
      context: .
      dockerfile: Dockerfile
      target: tools
    volumes:
      - .:/app
      - /app/web/node_modules
    environment:
      - ENV=tools
    profiles:
      - tools
    command: ["sh"]

  # Web Service - serves the frontend
  videogrinder-web-dev:
    build:
      context: .
      target: development
    container_name: videogrinder-web-dev
    ports:
      - "8080:8080"
    volumes:
      - ./web:/app/web
      - air-tmp:/tmp
    depends_on:
      - videogrinder-api-dev
    networks:
      - videogrinder-network
    profiles:
      - dev
    command: ["air", "-c", ".air-web.toml"]
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # API Service - handles REST API requests
  videogrinder-api-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "8081:8081"
    volumes:
      - .:/app
      - videogrinder-uploads:/app/uploads
      - videogrinder-outputs:/app/outputs
      - videogrinder-temp:/app/temp
      - air-tmp:/app/tmp
    environment:
      - ENV=development
      - DEBUG=true
      - AWS_REGION=us-east-1
      - PORT=8081
      - PROCESSOR_URL=http://videogrinder-processor-dev:8082
      - AWS_ENDPOINT_URL=http://localstack:4566
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
    networks:
      - videogrinder-network
    depends_on:
      videogrinder-processor-dev:
        condition: service_healthy
    profiles:
      - dev
    command: ["air", "-c", ".air-api.toml"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Processor Service - handles video processing
  videogrinder-processor-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "8082:8082"
    volumes:
      - .:/app
      - videogrinder-uploads:/app/uploads
      - videogrinder-outputs:/app/outputs
      - videogrinder-temp:/app/temp
      - air-tmp:/app/tmp
    environment:
      - ENV=development
      - DEBUG=true
      - AWS_REGION=us-east-1
      - PORT=8082
      - AWS_ENDPOINT_URL=http://localstack:4566
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
    networks:
      - videogrinder-network
    profiles:
      - dev
    command: ["air", "-c", ".air-processor.toml"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Production Web Service
  videogrinder-web-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "8080:8080"
    environment:
      - ENV=production
      - AWS_REGION=us-east-1
      - PORT=8080
      - API_URL=http://videogrinder-api-prod:8081
    networks:
      - videogrinder-network
    depends_on:
      videogrinder-api-prod:
        condition: service_healthy
    profiles:
      - prod
    command: ["./web/cmd/main"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Production API Service
  videogrinder-api-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "8081:8081"
    volumes:
      - videogrinder-uploads:/app/uploads
      - videogrinder-outputs:/app/outputs
      - videogrinder-temp:/app/temp
    environment:
      - ENV=production
      - AWS_REGION=us-east-1
      - PORT=8081
      - PROCESSOR_URL=http://videogrinder-processor-prod:8082
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_ENDPOINT_URL=${AWS_ENDPOINT_URL}
    networks:
      - videogrinder-network
    depends_on:
      videogrinder-processor-prod:
        condition: service_healthy
    profiles:
      - prod
    command: ["./api/cmd/main"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Production Processor Service
  videogrinder-processor-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "8082:8082"
    volumes:
      - videogrinder-uploads:/app/uploads
      - videogrinder-outputs:/app/outputs
      - videogrinder-temp:/app/temp
    environment:
      - ENV=production
      - AWS_REGION=us-east-1
      - PORT=8082
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_ENDPOINT_URL=${AWS_ENDPOINT_URL}
    networks:
      - videogrinder-network
    profiles:
      - prod
    command: ["./processor/cmd/main"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # LocalStack - AWS services emulation for development
  localstack:
    image: localstack/localstack:3.0
    ports:
      - "4566:4566"
      - "4510-4559:4510-4559"
    environment:
      - DEBUG=1
      - SERVICES=s3,dynamodb,sqs
      - DATA_DIR=/var/lib/localstack
      - DOCKER_HOST=unix:///var/run/docker.sock
      - HOSTNAME_EXTERNAL=localstack
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - PERSISTENCE=1
    volumes:
      - localstack-data:/var/lib/localstack
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - videogrinder-network
    profiles:
      - dev
      - localstack
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

volumes:
  videogrinder-uploads:
    driver: local
  videogrinder-outputs:
    driver: local
  videogrinder-temp:
    driver: local
  air-tmp:
    driver: local
  localstack-data:
    driver: local

networks:
  videogrinder-network:
    driver: bridge
